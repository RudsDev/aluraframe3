{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","tempConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","event","_createStore","target","result","onsuccess","bind","onerror","console","log","error","name","conn","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,SAASC,qBAAT,GAAiC;;AAEtD,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;;AAElB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;;AAElC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA6BC,OAA7B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,UAACC,KAAD,EAAS;AACnChB,0CAAkBiB,YAAlB,CAA+BD,MAAME,MAAN,CAAaC,MAA5C;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,UAACJ,KAAD,EAAS;;AAE7B,4BAAG,CAACX,UAAJ,EAAe;AACXA,yCAAaW,MAAME,MAAN,CAAaC,MAA1B;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAI;AACnB,sCAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,UAACN,KAAD,EAAS;AAC3BO,gCAAQC,GAAR,CAAYR,MAAME,MAAN,CAAaO,KAAzB;AACAf,+BAAOM,MAAME,MAAN,CAAaO,KAAb,CAAmBC,IAA1B;AACH,qBAHD;AAIH,iBAxBM,CAAP;AAyBH;AAjCL;AAAA;AAAA,8CAmC4B;AACpB,oBAAGrB,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAxCL;AAAA;AAAA,yCA0CwBsB,IA1CxB,EA0C6B;AACrBzB,uBAAO0B,OAAP,CAAe,UAACC,KAAD,EAAS;AACpB,wBAAGF,KAAKG,gBAAL,CAAsBC,QAAtB,CAA+BF,KAA/B,CAAH,EACIF,KAAKK,iBAAL,CAAuBH,KAAvB;AACJF,yBAAKM,iBAAL,CAAuBJ,KAAvB,EAA6B,EAACK,eAAc,IAAf,EAA7B;AACH,iBAJD;AAKH;AAhDL;;AAAA;AAAA;AAkDH,CA3DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function tempConnectionFactory() {\r\n    \r\n    const stores = ['negociacoes'];\r\n    const version = 3;\r\n    const dbName = 'aluraframe';\r\n    \r\n    var connection = null;\r\n    var close = null;\r\n    \r\n    return class ConnectionFactory{\r\n    \r\n        constructor(){\r\n            throw new Error('Não é possível criar instâncias dessa classe.');\r\n        }\r\n    \r\n        static getConnection(){\r\n    \r\n            return new Promise((resolve, reject)=>{\r\n    \r\n                let openRequest = window.indexedDB.open(stores,version);\r\n    \r\n                openRequest.onupgradeneeded = (event)=>{\r\n                    ConnectionFactory._createStore(event.target.result);\r\n                };\r\n    \r\n                openRequest.onsuccess = (event)=>{\r\n    \r\n                    if(!connection){\r\n                        connection = event.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = ()=>{\r\n                            throw new Error('Essa conexão não pode ser fechada diretamente.');\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n    \r\n                openRequest.onerror = (event)=>{\r\n                    console.log(event.target.error);\r\n                    reject(event.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    \r\n        static _createStore(conn){\r\n            stores.forEach((store)=>{\r\n                if(conn.objectStoreNames.contains(store))\r\n                    conn.deleteObjectStore(store);\r\n                conn.createObjectStore(store,{autoIncrement:true})\r\n            });\r\n        }\r\n    }    \r\n})();"]}